<!DOCTYPE html>
<html lang="ja">

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- reset css -->
  <link rel="stylesheet" href="/css/reset.css">
  <!--共有の -->

  <!-- 共通 css -->
  <link rel="stylesheet" href="/css/common_admin.css">
  <!--共有の -->



  <!-- fontawesome -->
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css">

  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>

  <title>データ分析PDF出力 pdf</title>

  <!-- ページ内スタイル -->
  <style>
    body {
      background-color: #212124;
    }

    main {
      margin: 120px auto 0 auto;
      width: 90%;
      min-width: 350px;
      min-height: 90vh;
      font-size: 1.6rem;
    }

    .form_wrap {
      margin: 24px 0 12px 0;
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }

    .form_wrap h2 {
      font-size: 1.8rem;
    }

    .form_wrap button {
      margin: 16px 0;
      width: 100%;
      background-color: #7698C5;
    }

    .pdf_output {
      margin-bottom: 40px;
      padding: 40px;
      width: 100%;
      background-color: white;
      border-radius: 20px;
      border: 1px solid #707070;
    }

    .pdf_output img {
      margin-top: 24px;
      width: 90%;
      height: auto;
    }

    header {
      background-color: #212124;
    }

    #charts {
      width: 100%;
      padding: 0 0 100px 0;
      margin: 0 auto;
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: flex-start;
    }

    #movieList {
      width: 600px;
      height: 400px;
      border: 1px solid #333;
      overflow-y: scroll;
      margin-bottom: 20px;
    }

    .movieLists {
      cursor: pointer;
      width: 100%;
      height: 35px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      transition: 0.1s;
      color: #999;
    }

    .movieLists:hover {
      background-color: rgba(246, 186, 62, 0.2);
      color: #fff;
    }

    .movieLists h3 {
      padding-left: 30px;
    }

    .movieLists p {
      padding-right: 20px;
      color: #fff;
    }

    .movieLists p span {
      color: #999;
    }

    .even {
      background-color: rgba(246, 186, 62, 0.1);
    }

    #doughnut {
      width: 600px;
      height: 400px;
      position: relative;
    }

    #doughnut-status {
      width: 200px;
      height: 100px;
      text-align: center;
      position: absolute;
      top: 170px;
      left: 175px;
    }

    #doughnut-status span {
      margin-right: 10px;
    }

    #doughnut-status * {
      margin-bottom: 10px;
      color: #fff;
    }

    #chart3-box {
      display: flex;
      width: 550px;
      height: 400px;
      justify-content: center;
      align-items: center;
      border-left: 1px solid #444;
      border-bottom: 1px solid #444;
    }

    #chart2 {
      margin-top: 30px;
    }

    #chart5 {
      margin-top: 30px;
    }

    #graphs {
      display: none;
    }
  </style>
</head>

<!-- --------------------------body---------------------------------------------------------------------------- -->

<body>
  <div id="app">

    <!-- ---header -->
    <header>
      <h1>
        <a href="/admin">
          <span class="header-logo">HAL CINEMA</span>
          <span class="header-address">NAGOYA</span>
        </a>
      </h1>
      <div>
        <img src="/images/menu.png" alt="menu" onclick="menuFadeIn()">
      </div>
    </header>

    <!-- menu -->
    <article class="menu" id="menu">
      <h2>MENU</h2>
      <ul>
        <li><a href="/admin" class="link">ホーム</a></li>
        <li><a href="/admin/mail" class="link">メール作成</a></li>
        <li><a href="/admin/pdf" class="link">データ分析</a></li>
        <li><a href="/admin/production_list" class="link">登録映画一覧</a></li>
        <li><a href="/admin/production_add" class="link">映画追加</a></li>
        <li class="menu-logout">ログアウト</li>
      </ul>
      <img src="/images/menu_close.png" alt="メニュークローズアイコン" class="menu-close" onclick="menuFadeOut()">
    </article>


    <!-- ---main -->
    <main>
      <!-- パンくずリスト -->
      <p>
        <a class="link" href="/admin">HOME</a>
        <span class="link-partition">＞</span>
        <a class="link" href="/admin/pdf">データ分析</a>
      </p>
      <section class="form_wrap">
        <h2>HALCINEMA NAGOYA</h2>
        <p>
          <select v-model="formData.kind" @change="branchBar">
            <option value="count">来場者数</option>
            <option value="sale">売上金額</option>
          </select>
          <span>毎に分割</span>

        <div>
          <input type="date" v-model="formData.first" @change="customerBar">
        </div>
        <div>
          <input type="date" v-model="formData.last" @change="customerBar">
        </div>
        <div><button @click="print">pdf出力</button></div>
        </p>
      </section>
      <!-- たかしくんお任せ枠作りやすいようにデータ分析画面は作って! -->

      <div id="charts">
        <div>
          <canvas id="chart1" width="600" height="400px"></canvas>
        </div>
        <div id="movieList">
          <div class="movieLists" v-for="(item, index) in movieList" :key="index"
            :class="(index % 2) !== 0 ? '':'even' " @click="changeGenderRatio(item.movieId)">
            <h3>{{ item.movieName }}</h3>
            <p>{{ item.count }} <span>tickets</span></p>
          </div>
        </div>
        <canvas id="chart4" width="600" height="400"></canvas>
        <div id="doughnut">
          <div id="doughnut-status">
            <h3>男女比率</h3>
            <p>{{genderRatio.about === null ? "すべて":"movieID: " + genderRatio.about}}</p>
            <p>男: {{ genderRatio.men }}<span></span>女: {{ genderRatio.women }}</p>
            <p>総数: {{ genderRatio.men +  genderRatio.women }}</p>
          </div>
          <div id="chart3-box">
            <canvas id="chart3" width="600" height="350"></canvas>
          </div>
        </div>
        <canvas id="chart2" width="600" height="400"></canvas>
        <canvas id="chart5" width="600" height="400"></canvas>
      </div>
  </div>

  <div id="graphs">
    <div class="print">
      <h2>直近12ヶ月の売上金額推移と累計</h2>
      <canvas id="printChart1" width="1000" height="600"></canvas>
    </div>
  </div>

  <script src="/js/axios.min.js"></script>
  <script>
    const app = new Vue({
      el: '#app',
      data: {
        formData: {
          kind: "count",
          first: "",
          last: ""
        },
        chart1: null,
        chart2: null,
        chart3: null,
        chart4: null,
        chart5: null,
        movieList: [],
        cpuInfo: {
          label: [],
          data: []
        },
        freeInfo: {
          label: [],
          memData: [],
          cpuData: []
        },
        genderRatio: {
          about: null,
          men: 0,
          women: 0
        }
      },
      async mounted() {
        Chart.defaults.global.animation.duration = 2000
        const now = new Date()
        nowStr = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`.replace(/\n|\r/g, '')
        now.setMonth(now.getMonth() - 1)
        monthAgo = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`.replace(/\n|\r/g, '')
        this.formData.last = nowStr
        this.formData.first = monthAgo
        this.customerBar()
        this.cpuUsageLine()
        this.genderDoughnut()
        this.allSalesLine()
        this.UsageRate()
        const label_data = []
        let data = new Array(12).fill(0)
        for (let i = 11; i > -1; i--) {
          const now = new Date()
          now.setMonth(now.getMonth() - i)
          label_data.push(now.getFullYear() + "-" + String(now.getMonth() + 1).padStart(2, "0"))
        }
        const result = await axios.get("/api/getAllSales")
        result.data.forEach((val, i) => {
          const outcome = label_data.indexOf(val.grouping_column)
          if (outcome !== -1) {
            data[outcome] = val.value
          }
        })
        const bar_data = []
        let sumData = 0
        data.forEach((val, i) => {
          sumData += val
          bar_data.push(sumData)
        })
        const ctx1 = document.getElementById("printChart1").getContext("2d")
        new Chart(ctx1, {
          type: "bar",           // 一応棒グラフだとしておく
          data: {
            labels: label_data,
            datasets: [
              {
                type: "line",            // この系列を折線グラフだと指定
                label: "売上推移(千円)",
                data,
                tension: 0,
                fill: false,
                backgroundColor: "rgba(0,210,211,0.3)",
                borderColor: "rgba(0,210,211,0.9)",
                borderWidth: 1
              },
              {
                label: "累計売上(千円)",
                data: bar_data,
                backgroundColor: "rgba(246,186,62,0.1)",
                borderColor: "rgba(246,186,62,1)",
                borderWidth: 1
              }
            ]
          },
          options: {
            responsive: false,
            title: {
              display: true,
              fontSize: 20
            },
            legend: {
              labels: { fontColor: "#555" },
              position: 'top'
            },
            scales: {
              xAxes: [{
                display: true,
                gridLines: {
                  display: true,
                  color: "#eee"
                },
                ticks: {
                  fontColor: "#555",
                  fontSize: 9,
                }
              }],
              yAxes: [{
                display: true,
                gridLines: {
                  display: true,
                  color: "#eee"
                },
                ticks: {
                  fontColor: "#555",
                  fontSize: 9,
                  beginAtZero: true
                }
              }]
            }

          }
        })
      },
      methods: {
        displayGraph(target, { label, data, kind, title, bg, br, x, y }) {
          const ctx = document.getElementById(target).getContext('2d')
          if (this[target] === null) {
            this[target] = new Chart(ctx, {
              type: kind,
              data: {
                labels: label,
                datasets: [{ label: title, data: data, backgroundColor: bg ? bg : "rgba(246,186,62,0.1)", borderColor: br ? br : "rgba(246,186,62,1)", borderWidth: 1, lineTension: 0 }]
              },
              options: {
                responsive: false,
                legend: {
                  labels: { fontColor: "#fff" }
                },
                animationEasing: 'easeInOutQuart',
                animationSteps: 80,
                scales: {
                  xAxes: x ? x : [{
                    display: true,
                    gridLines: {
                      display: true,
                      color: "#444"
                    },
                    ticks: {
                      fontColor: "white",
                      fontSize: 9,
                    }
                  }],
                  yAxes: y ? y : [{
                    display: true,
                    gridLines: {
                      display: true,
                      color: "#444"
                    },
                    ticks: {
                      fontColor: "white",
                      fontSize: 9,
                      beginAtZero: true
                    }
                  }]
                }
              }
            })
          } else {
            this[target].type = kind
            this[target].data.datasets = [{ ...this[target].data.datasets[0], label: title, data }]
            this[target].data.labels = label
            this[target].update()
          }
        },
        async branchBar() {
          console.log(this.formData.kind)
          if (this.formData.kind === "count") {
            this.customerBar()
          } else {
            this.salesBar()
          }
        },
        async customerBar() {
          const result = await axios.get("/api/getCustomers", { params: { last: this.formData.last, first: this.formData.first } })
          const data = result.data.map(val => val.count)
          const label = result.data.map(val => val.movieName)
          console.log(label)
          this.movieList = result.data
          this.displayGraph("chart1", { label, data, kind: "bar", title: "期間中の来場者数(映画毎)" })
        },
        async salesBar() {
          const result = await axios.get("/api/getSales", { params: { last: this.formData.last, first: this.formData.first } })
          console.log(result.data)
          const data = result.data.map(val => val.value)
          const label = result.data.map(val => val.movieName)
          console.log(label)
          this.movieList = result.data
          this.displayGraph("chart1", { label, data, kind: "bar", title: "映画毎売上額(千円)" })
        },
        async allSalesLine() {
          const label_data = []
          let data = new Array(12).fill(0)
          for (let i = 11; i > -1; i--) {
            const now = new Date()
            now.setMonth(now.getMonth() - i)
            label_data.push(now.getFullYear() + "-" + String(now.getMonth() + 1).padStart(2, "0"))
          }
          const result = await axios.get("/api/getAllSales")
          result.data.forEach((val, i) => {
            const outcome = label_data.indexOf(val.grouping_column)
            if (outcome !== -1) {
              data[outcome] = val.value
            }
          })
          const bar_data = []
          let sumData = 0
          data.forEach((val, i) => {
            sumData += val
            bar_data.push(sumData)
          })
          console.log(bar_data)
          const ctx = document.getElementById("chart4").getContext('2d')
          if (this.chart4 === null) {
            this.chart4 = new Chart(ctx, {
              type: "bar",           // 一応棒グラフだとしておく
              data: {
                labels: label_data,
                datasets: [
                  {
                    type: "line",            // この系列を折線グラフだと指定
                    label: "売上推移(千円)",
                    data,
                    tension: 0,
                    fill: false,
                    backgroundColor: "rgba(0,210,211,0.3)",
                    borderColor: "rgba(0,210,211,0.9)",
                    borderWidth: 1
                  },
                  {
                    label: "累計売上(千円)",
                    data: bar_data,
                    backgroundColor: "rgba(246,186,62,0.1)",
                    borderColor: "rgba(246,186,62,1)",
                    borderWidth: 1
                  }
                ]
              },
              options: {
                responsive: false,
                title: {
                  display: true,
                  fontSize: 20
                },
                legend: {
                  labels: { fontColor: "#fff" },
                  position: 'top'
                },
                scales: {
                  xAxes: [{
                    display: true,
                    gridLines: {
                      display: true,
                      color: "#444"
                    },
                    ticks: {
                      fontColor: "white",
                      fontSize: 9,
                    }
                  }],
                  yAxes: [{
                    display: true,
                    gridLines: {
                      display: true,
                      color: "#444"
                    },
                    ticks: {
                      fontColor: "white",
                      fontSize: 9,
                      beginAtZero: true
                    }
                  }]
                }

              }
            })
          } else {
            this.chart4.data.type = "bar"
            this.chart4.data.labels = this.freeInfo.label
            this.chart4.data.datasets = [{ ...this.chart4.data.datasets[0], data }, { ...this.chart4.data.datasets[1], data: bar_data }]
            this.chart4.update()
          }
          //this.displayGraph("chart4", { label: label_data, data, kind: "line", title: "総売上推移(千円)" })
        },
        async cpuUsageLine() {
          const maxData = 20
          this.displayGraph("chart2", { label: this.cpuInfo.label, data: this.cpuInfo.data, kind: "line", title: "サーバCPU負荷度", bg: ["rgba(0,210,211,0.3)"], br: "rgba(0,210,211,0.8)" })
          const { data } = await axios.get("/api/getCpuUsage")
          const now = new Date()
          const nowStr = String(now.getMinutes()).padStart(2, "0") + ":" + String(now.getSeconds()).padStart(2, "0")
          if (this.cpuInfo.label.length >= maxData) {
            this.cpuInfo.label.shift()
          }
          if (this.cpuInfo.data.length >= maxData) {
            this.cpuInfo.data.shift()
          }
          this.cpuInfo.label.push(nowStr)
          this.cpuInfo.data.push(data.info)
          this.displayGraph("chart2", { label: this.cpuInfo.label, data: this.cpuInfo.data, kind: "line", title: "サーバCPU負荷度" })
          setTimeout(this.cpuUsageLine, 1000)
        },
        async UsageRate() {
          const maxData = 20
          const { data } = await axios.get("/api/getFreeRatio")
          if (this.freeInfo.memData.length >= maxData) {
            this.freeInfo.memData.shift()
          }
          if (this.freeInfo.cpuData.length >= maxData) {
            this.freeInfo.cpuData.shift()
          }
          const now = new Date()
          const nowStr = String(now.getMinutes()).padStart(2, "0") + ":" + String(now.getSeconds()).padStart(2, "0")
          if (this.freeInfo.label.length >= maxData) {
            this.freeInfo.label.shift()
          }
          this.freeInfo.label.push(nowStr)
          this.freeInfo.memData = [...this.freeInfo.memData, data[0]]
          this.freeInfo.cpuData = [...this.freeInfo.cpuData, data[1]]
          const ctx = document.getElementById("chart5").getContext('2d')
          if (this.chart5 === null) {
            this.chart5 = new Chart(ctx, {
              type: "line",
              data: {
                labels: this.freeInfo.label,
                datasets: [
                  { label: ["メモリ空き領域"], type: "line", data: this.freeInfo.memData, backgroundColor: "rgba(0,210,211,0.3)", borderColor: "rgba(0,210,211,0.8)", borderWidth: 1, lineTension: 0 },
                  { label: ["CPU空き領域"], type: "line", data: this.freeInfo.cpuData, backgroundColor: "rgba(16,172,132,0.1)", borderColor: "rgba(16,172,132,0.8)", borderWidth: 1, lineTension: 0 }
                ]
              },
              options: {
                responsive: false,
                legend: {
                  labels: { fontColor: "#fff" }
                },
                animationEasing: 'easeInOutQuart',
                animationSteps: 80,
                scales: {
                  xAxes: [{
                    display: true,
                    gridLines: {
                      display: true,
                      color: "#444"
                    },
                    ticks: {
                      fontColor: "white",
                      fontSize: 9,
                    }
                  }],
                  yAxes: [{
                    display: true,
                    gridLines: {
                      display: true,
                      color: "#444"
                    },
                    ticks: {
                      fontColor: "white",
                      fontSize: 9,
                      beginAtZero: true
                    }
                  }]
                }
              }
            })
          } else {
            this.chart5.type = "line"
            this.chart5.data.labels = this.freeInfo.label
            this.chart5.data.datasets = [{ ...this.chart5.data.datasets[0], data: this.freeInfo.memData }, { ...this.chart5.data.datasets[1], data: this.freeInfo.cpuData }]
            this.chart5.update()
          }
          setTimeout(this.UsageRate, 2000)
        },
        async genderDoughnut() {
          let params = { params: {} }
          if (this.genderRatio.about !== null) {
            params.params.movieId = this.genderRatio.about
          }
          const { data } = await axios.get("/api/getGenderRatio", params)
          this.genderRatio.men = data[0]
          this.genderRatio.women = data[1]
          this.displayGraph("chart3", { label: ["男", "女"], data, kind: "doughnut", title: "男女比率", bg: ["rgba(116,185,255,0.3)", "rgba(232,67,147,0.3)"], br: ["rgba(116,185,255,0.5)", "rgba(232,67,147,0.5)"], y: { gridLines: { display: true } }, x: { ticks: { display: true } } })
        },
        changeGenderRatio(i) {
          this.genderRatio.about = i
          this.genderDoughnut()
        },
        print() {
          window.print()
        }
      }
    });
  </script>

  </main>

  <!-- ---footer -->
  <footer onclick="scrollToTop()">
    <img src="/images/arrow.png" alt="上矢印アイコン">
    <p>Back top</p>
  </footer>



  <!-- orinal javascript file -->
  <script src="/js/common.js"></script>
  <link rel="stylesheet" href="/css/print.css" type="text/css" media="print" />
</body>

</html>